name: s390x

on: [push, pull_request]

jobs:
  build:
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: s390x
            distro: bullseye
          # python-version: "3.9"

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Run commands
        id: runcmd
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          # githubToken: ${{ github.token }}

          # Create an artifacts directory
          # setup: |
          #   mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          # dockerRunArgs: |
          #   --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          # env: | # YAML, but pipe character is necessary
          #   artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          install: |
            apt update -q -y
            apt install -q -y git python3-venv python3-pip python3-setuptools

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
            # cp $(which git) "/artifacts/${artifact_name}"
            # echo "Produced artifact at /artifacts/${artifact_name}"
            python3 -m venv venv
            source venv/bim/activate
            which python
            python -m pip install -U pip setuptools wheel pytest
            python -m pip install -v -e .
            python -m pip list
            python -m pytest -v --pyargs numcodecs

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"

      # - name: Show the artifact
      #   # Items placed in /artifacts in the container will be in
      #   # ${PWD}/artifacts on the host.
      #   run: |
      #     ls -al "${PWD}/artifacts"
